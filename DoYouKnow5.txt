Do You Know?

Set 10
1. Interface Grid<E> implements. Both BoundedGrid and UnboundedGrid implement
the isValid method.
2.In Abstract Class AbstractGrid the method getValidAdjacentLocations uses
the method isValid. Other methods call getValidAdjacentLocations which
indirectly calls the isValid method.
3. get is called, getOccupiedAdjacentLocations is called. The latter also calls
isValid. The get method is in both the UnboundedGrid class and BoundedGrid 
class.
4.The method works by testing if the location of neighborLoc is null. No matter 
what type get returns, the method only cares if it is null. Then it adds the 
loc to an arraylist of locations and returns the arraylist, regardless of what
get returned.
5.It would only check for four different locations around the location instead
of 8, disregarding upright, upleft, downright, and downleft.

Set 11

1. The precondition in the constructor states that rows and cols must be greater than zero, ensuring at least one spot.
2. The number of columns is determined by finding the length of one row, assuming ? there is one row. ?
3. The Location's row needs to be between 0 inclusive and the number of rows exclusive, and likewise for columns.
4. getOccupiedLoactions() returns an ArrayList<Location> of all adjacent Locations that are not null. The runtime is O(r*c).
5. get() returns an object E. It needs a Location. The runtime is O(1)
6. In the put(0) method, if the Location in the parameter is not valid, a IllegalArgumentException will be thrown, and if the object E is null, 
  NullPointerException will be thrown. The runtime is O(1).
7. remove() will return an object E from the array. If it tries to remove an empty spot, it returns null. Runtime of O(1).
8. Based on the previous answers, the implementation seems to be efficient, as most methods have a runtime of O(1), with the exception of
  getOccupiedLocations().
